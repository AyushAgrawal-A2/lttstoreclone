// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  addresses        Address[]
  defaultAddress   Address?  @relation(name: "defaultAddress", fields: [defaultAddressId], references: [id])
  cart             Cart?
  defaultAddressId String?   @unique

  @@index([email])
}

model Address {
  id             String @id @default(uuid())
  firstName      String
  lastName       String
  company        String
  address1       String
  address2       String
  city           String
  country        String
  province       String
  postalCode     Int
  phone          String
  User           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String @unique
  defaultForUser User?  @relation(name: "defaultAddress")
}

model Cart {
  id       String     @id @default(uuid())
  cartItem CartItem[]
  User     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String     @unique
}

model CartItem {
  id            String      @id @default(uuid())
  product       Product     @relation(fields: [productId], references: [id])
  size          SizeOption  @relation(fields: [sizeOptionId], references: [id])
  color         ColorSwatch @relation(fields: [colorSwatchId], references: [id])
  Cart          Cart?       @relation(fields: [cartId], references: [id])
  productId     String
  sizeOptionId  String
  colorSwatchId String
  cartId        String?

  @@unique([productId, sizeOptionId, colorSwatchId])
}

model Product {
  id                String        @id @default(uuid())
  path              String        @unique
  title             String
  inStock           Boolean
  price             Float
  lttProductId      String
  type              String
  gender            String
  featureImages     String[]
  collections       String[]
  images            Image[]
  details           Json
  sizeOptions       SizeOption[]
  ranks             Ranks?
  rating            Rating?
  reviewStats       ReviewStat?
  colorSwatch       ColorSwatch[]
  relatedProducts   Product[]     @relation("RelatedProducts")
  relatedToProducts Product[]     @relation("RelatedProducts")
  CartItem          CartItem[]

  @@index([path])
}

model Ranks {
  id         String  @id @default(uuid())
  date       Int
  bestseller Int
  featured   Int
  Product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String  @unique
}

model Image {
  id        String  @id @default(uuid())
  src       String
  overlay   String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Rating {
  id        String  @id @default(uuid())
  stars     Float
  reviews   Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique
}

model Color {
  id              String        @id @default(uuid())
  name            String        @unique
  backgroundColor String
  backgroundImage String
  ColorSwatch     ColorSwatch[]

  @@index([name])
}

model ColorSwatch {
  id          String     @id @default(uuid())
  imgPosition Int
  color       Color      @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId     String
  Product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  CartItem    CartItem[]
}

model SizeOption {
  id       String     @id @default(uuid())
  symbol   String     @unique
  name     String
  Product  Product[]
  CartItem CartItem[]

  @@index([symbol])
}

model ReviewStat {
  id        String  @id @default(uuid())
  star_1    Int
  star_2    Int
  star_3    Int
  star_4    Int
  star_5    Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique
}

model BlogCard {
  id       String        @id @default(uuid())
  path     String        @unique
  heading  String
  cardText String
  date     DateTime
  imgURL   String
  content  BlogContent[]

  @@index([path])
}

model BlogContent {
  id         String   @id @default(uuid())
  isImage    Boolean
  data       String
  BlogCard   BlogCard @relation(fields: [blogCardId], references: [id], onDelete: Cascade)
  blogCardId String
}

model HomeBanner {
  id       String @id @default(uuid())
  link     String
  imgURL   String
  position Int
}
