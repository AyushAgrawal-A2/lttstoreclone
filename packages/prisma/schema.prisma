// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model Product {
  id                String        @id @default(uuid())
  path              String        @unique
  title             String
  inStock           Boolean
  price             Float
  lttProductId      String
  type              String
  gender            String
  featureImages     String[]
  collections       String[]
  images            Image[]
  details           Json
  sizeOptions       SizeOption[]
  ranks             Ranks         @relation(fields: [ranksId], references: [id], onDelete: Cascade)
  rating            Rating        @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  reviewStats       ReviewStat    @relation(fields: [reviewStatId], references: [id], onDelete: Cascade)
  colorSwatch       ColorSwatch[]
  relatedProducts   Product[]     @relation("RelatedProducts")
  relatedToProducts Product[]     @relation("RelatedProducts")
  ranksId           String        @unique
  ratingId          String        @unique
  reviewStatId      String        @unique

  @@index([path])
}

model Ranks {
  id         String   @id @default(uuid())
  date       Int
  bestseller Int
  featured   Int
  Product    Product?
}

model Image {
  id        String  @id @default(uuid())
  src       String
  overlay   String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Rating {
  id      String   @id @default(uuid())
  stars   Float
  reviews Int
  Product Product?
}

model Color {
  id              String        @id @default(uuid())
  name            String        @unique
  backgroundColor String
  backgroundImage String
  ColorSwatch     ColorSwatch[]

  @@index([name])
}

model ColorSwatch {
  id          String  @id @default(uuid())
  imgPosition Int
  color       Color   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId     String
  Product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
}

model SizeOption {
  id      String    @id @default(uuid())
  symbol  String    @unique
  name    String
  Product Product[]

  @@index([symbol])
}

model ReviewStat {
  id      String   @id @default(uuid())
  star_1  Int
  star_2  Int
  star_3  Int
  star_4  Int
  star_5  Int
  Product Product?
}

model BlogCard {
  id       String        @id @default(uuid())
  path     String        @unique
  heading  String
  cardText String
  date     DateTime
  imgURL   String
  content  BlogContent[]

  @@index([path])
}

model BlogContent {
  id         String   @id @default(uuid())
  isImage    Boolean
  data       String
  BlogCard   BlogCard @relation(fields: [blogCardId], references: [id], onDelete: Cascade)
  blogCardId String
}

model HomeBanner {
  id       String @id @default(uuid())
  link     String
  imgURL   String
  position Int
}
